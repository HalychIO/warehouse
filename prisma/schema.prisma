generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model access_level {
  id          Int        @id @default(autoincrement())
  level       String     @db.VarChar(50)
  description String     @db.Text
  position    position[]
}

model asset {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(150)
  category_id      Int
  serial_number    String             @db.VarChar(50)
  inventory_number String             @db.VarChar(50)
  purchase_date    DateTime           @db.Date
  status           String             @db.VarChar(50)
  location_id      Int
  asset_category   asset_category     @relation(fields: [category_id], references: [id], onUpdate: Restrict, map: "asset_ibfk_1")
  storage_location storage_location   @relation(fields: [location_id], references: [id], onUpdate: Restrict, map: "asset_ibfk_2")
  asset_assingment asset_assingment[]
  maintenence_log  maintenence_log[]

  @@index([category_id], map: "category_id")
  @@index([location_id], map: "location_id")
}

model asset_assingment {
  id                  Int      @id @default(autoincrement())
  asset_id            Int
  employee_id         Int
  assign_date         DateTime @db.Date
  return_date         DateTime @db.Date
  condition_on_return String   @db.VarChar(200)
  asset               asset    @relation(fields: [asset_id], references: [id], onUpdate: Restrict, map: "asset_assingment_ibfk_1")
  employee            employee @relation(fields: [employee_id], references: [id], onUpdate: Restrict, map: "asset_assingment_ibfk_2")

  @@index([asset_id], map: "asset_id")
  @@index([employee_id], map: "employee_id")
}

model asset_category {
  id          Int     @id @default(autoincrement())
  name        Int
  description Int
  asset       asset[]
}

model category {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(200)
  description String?   @db.Text
  product     product[]
}

model current_stock {
  id               Int              @id @default(autoincrement())
  product_id       Int
  location_id      Int
  quantity         Int
  product          product          @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "current_stock_ibfk_1")
  storage_location storage_location @relation(fields: [location_id], references: [id], onUpdate: Restrict, map: "current_stock_ibfk_2")

  @@index([location_id], map: "location_id")
  @@index([product_id], map: "product_id")
}

model customer {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(200)
  contact_info String        @db.VarChar(500)
  adress       String        @db.VarChar(200)
  sales_order  sales_order[]
}

model department {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(200)
  description String     @db.Text
  employee    employee[]
}

model employee {
  id               Int                @id @default(autoincrement())
  first_name       String             @db.VarChar(200)
  last_name        String             @db.VarChar(200)
  position_id      Int
  department_id    Int
  contacn_info     String             @db.Text
  hire_date        DateTime           @db.Date
  status           String             @db.VarChar(50)
  asset_assingment asset_assingment[]
  position         position           @relation(fields: [position_id], references: [id], onUpdate: Restrict, map: "employee_ibfk_1")
  department       department         @relation(fields: [department_id], references: [id], onUpdate: Restrict, map: "employee_ibfk_2")
  transaction      transaction[]
  user_account     user_account?

  @@index([department_id], map: "department_id")
  @@index([position_id], map: "position_id")
}

model maintenence_log {
  id          Int      @id @default(autoincrement())
  asset_id    Int
  date        DateTime @db.Date
  description String   @db.Text
  cost        Int
  asset       asset    @relation(fields: [asset_id], references: [id], onUpdate: Restrict, map: "maintenence_log_ibfk_1")

  @@index([asset_id], map: "asset_id")
}

model position {
  id           Int          @id @default(autoincrement())
  name         String       @db.VarChar(200)
  description  String       @db.Text
  level_id     Int
  employee     employee[]
  access_level access_level @relation(fields: [level_id], references: [id], onUpdate: Restrict, map: "position_ibfk_1")

  @@index([level_id], map: "level_id")
}

model product {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(200)
  sku                 String                @db.VarChar(30)
  unit                String                @db.VarChar(10)
  price               Int
  expiry_date         DateTime              @db.Date
  category_id         Int
  current_stock       current_stock[]
  category            category              @relation(fields: [category_id], references: [id], onUpdate: Restrict, map: "product_ibfk_1")
  purcase_order_item  purcase_order_item[]
  sales_order_item    sales_order_item[]
  suplier_and_product suplier_and_product[]
  transaction         transaction[]

  @@index([category_id], map: "category_id")
}

model purcase_order {
  id                 Int                  @id @default(autoincrement())
  suplier_id         Int
  order_date         DateTime             @db.Date
  expected_date      DateTime             @db.Date
  status             String               @db.VarChar(50)
  suplier            suplier              @relation(fields: [suplier_id], references: [id], onUpdate: Restrict, map: "purcase_order_ibfk_1")
  purcase_order_item purcase_order_item[]
  transaction        transaction[]

  @@index([suplier_id], map: "suplier_id")
}

model purcase_order_item {
  id               Int           @id @default(autoincrement())
  purcase_order_id Int
  product_id       Int
  qantity_ordered  Int
  qantity_received Int
  price            Int
  purcase_order    purcase_order @relation(fields: [purcase_order_id], references: [id], onUpdate: Restrict, map: "purcase_order_item_ibfk_1")
  product          product       @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "purcase_order_item_ibfk_2")

  @@index([product_id], map: "product_id")
  @@index([purcase_order_id], map: "purcase_order_id")
}

model sales_order {
  id               Int                @id @default(autoincrement())
  customer_id      Int
  oder_data        Int
  status           Int
  customer         customer           @relation(fields: [customer_id], references: [id], onUpdate: Restrict, map: "sales_order_ibfk_1")
  sales_order_item sales_order_item[]
  transaction      transaction[]

  @@index([customer_id], map: "customer_id")
}

model sales_order_item {
  id             Int         @id
  sales_order_id Int
  product_id     Int
  qantity        Int
  price          Int
  product        product     @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "sales_order_item_ibfk_1")
  sales_order    sales_order @relation(fields: [sales_order_id], references: [id], onUpdate: Restrict, map: "sales_order_item_ibfk_2")

  @@index([product_id], map: "product_id")
  @@index([sales_order_id], map: "sales_order_id")
}

model storage_location {
  id            Int             @id @default(autoincrement())
  code          String          @db.VarChar(50)
  description   String          @db.Text
  asset         asset[]
  current_stock current_stock[]
  transaction   transaction[]
}

model suplier {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(200)
  contact_info        String                @db.Text
  purcase_order       purcase_order[]
  suplier_and_product suplier_and_product[]
}

model suplier_and_product {
  id         Int     @id @default(autoincrement())
  product_id Int
  suplier_id Int
  product    product @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "suplier_and_product_ibfk_1")
  suplier    suplier @relation(fields: [suplier_id], references: [id], onUpdate: Restrict, map: "suplier_and_product_ibfk_2")

  @@index([product_id], map: "product_id")
  @@index([suplier_id], map: "suplier_id")
}

model transaction {
  id                Int              @id @default(autoincrement())
  type              String           @db.VarChar(50)
  date              DateTime         @db.Date
  qantity           Int
  product_id        Int
  location_id       Int
  employee_id       Int
  purchase_order_id Int?
  sales_order_id    Int?
  storage_location  storage_location @relation(fields: [location_id], references: [id], onUpdate: Restrict, map: "transaction_ibfk_1")
  employee          employee         @relation(fields: [employee_id], references: [id], onUpdate: Restrict, map: "transaction_ibfk_2")
  product           product          @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "transaction_ibfk_3")
  purcase_order     purcase_order?   @relation(fields: [purchase_order_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "transaction_ibfk_4")
  sales_order       sales_order?     @relation(fields: [sales_order_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "transaction_ibfk_5")

  @@index([employee_id], map: "employee_id")
  @@index([location_id], map: "location_id")
  @@index([product_id], map: "product_id")
  @@index([purchase_order_id], map: "purchase_order_id")
  @@index([sales_order_id], map: "sales_order_id")
}

model user_account {
  id            Int      @id @default(autoincrement())
  employee_id   Int      @unique(map: "employee_id")
  username      String   @db.VarChar(200)
  password_hash String   @db.VarChar(200)
  last_login    DateTime @db.Date
  is_active     Boolean
  employee      employee @relation(fields: [employee_id], references: [id], onUpdate: Restrict, map: "user_account_ibfk_1")
}
